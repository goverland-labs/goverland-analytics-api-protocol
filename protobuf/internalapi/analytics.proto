syntax = "proto3";

package internalapi;

import "google/protobuf/timestamp.proto";

option go_package = ".;internalapi";

service Analytics {
  rpc GetMonthlyActiveUsers(MonthlyActiveUsersRequest) returns (MonthlyActiveUsersResponse);
  rpc GetVoterBuckets(VoterBucketsRequest) returns (VoterBucketsResponse);
  rpc GetExclusiveVoters(ExclusiveVotersRequest) returns (ExclusiveVotersResponse);
  rpc GetMonthlyNewProposals(MonthlyNewProposalsRequest) returns (MonthlyNewProposalsResponse);
  rpc GetSucceededProposalsCount(SucceededProposalsCountRequest) returns (SucceededProposalsCountResponse);
  rpc GetDaosVotersParticipateIn(DaosVotersParticipateInRequest) returns (DaosVotersParticipateInResponse);
  rpc GetTopVotersByVp(TopVotersByVpRequest) returns (TopVotersByVpResponse);
}

message MonthlyActiveUsersRequest {
  string dao_id = 1;
}

message MonthlyActiveUsers {
  google.protobuf.Timestamp period_started = 1;
  uint64 active_users = 2;
  uint64 new_active_users = 3;
}

message MonthlyActiveUsersResponse {
  repeated MonthlyActiveUsers monthly_active_users = 1;
}

message VoterBucketsRequest {
  string dao_id = 1;
}

message VoterBucketsResponse {
  repeated VoterGroup groups = 1;
}

message VoterGroup {
  string votes = 1;
  uint64 voters = 2;
}

message ExclusiveVotersRequest {
  string dao_id = 1;
}

message ExclusiveVotersResponse {
  uint32 count = 1;
  uint32 percent = 2;
}

message MonthlyNewProposalsRequest {
  string dao_id = 1;
}

message ProposalsByMonth {
  google.protobuf.Timestamp period_started = 1;
  uint64 proposals_count = 2;
}

message MonthlyNewProposalsResponse {
  repeated ProposalsByMonth proposals_by_month = 1;
}

message SucceededProposalsCountRequest {
  string dao_id = 1;
}

message SucceededProposalsCountResponse {
  uint32 succeeded = 1;
  uint32 finished = 2;
}

message DaosVotersParticipateInRequest {
  string dao_id = 1;
  uint64 limit = 2;
}

message DaosVotersParticipateInResponse {
  repeated DaoVotersParticipateIn dao_voters_participate_in = 1;
}

message DaoVotersParticipateIn {
  string dao_id = 1;
  uint32 voters_count = 2;
  float percent_voters = 3;
}

message TopVotersByVpRequest {
  string dao_id = 1;
  uint64 limit = 2;
}

message TopVotersByVpResponse {
  repeated VoterWithVp voter_with_vp = 1;
}

message VoterWithVp {
  string voter = 1;
  float vp_avg = 2;
  uint32 votes_count = 3;
}
