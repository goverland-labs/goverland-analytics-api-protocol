// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: protobuf/internalapi/analytics.proto

package internalapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Analytics_GetMonthlyActiveUsers_FullMethodName      = "/internalapi.Analytics/GetMonthlyActiveUsers"
	Analytics_GetVoterBuckets_FullMethodName            = "/internalapi.Analytics/GetVoterBuckets"
	Analytics_GetExclusiveVoters_FullMethodName         = "/internalapi.Analytics/GetExclusiveVoters"
	Analytics_GetMonthlyNewProposals_FullMethodName     = "/internalapi.Analytics/GetMonthlyNewProposals"
	Analytics_GetSucceededProposalsCount_FullMethodName = "/internalapi.Analytics/GetSucceededProposalsCount"
	Analytics_GetDaosVotersParticipateIn_FullMethodName = "/internalapi.Analytics/GetDaosVotersParticipateIn"
	Analytics_GetTopVotersByVp_FullMethodName           = "/internalapi.Analytics/GetTopVotersByVp"
)

// AnalyticsClient is the client API for Analytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsClient interface {
	GetMonthlyActiveUsers(ctx context.Context, in *MonthlyActiveUsersRequest, opts ...grpc.CallOption) (*MonthlyActiveUsersResponse, error)
	GetVoterBuckets(ctx context.Context, in *VoterBucketsRequest, opts ...grpc.CallOption) (*VoterBucketsResponse, error)
	GetExclusiveVoters(ctx context.Context, in *ExclusiveVotersRequest, opts ...grpc.CallOption) (*ExclusiveVotersResponse, error)
	GetMonthlyNewProposals(ctx context.Context, in *MonthlyNewProposalsRequest, opts ...grpc.CallOption) (*MonthlyNewProposalsResponse, error)
	GetSucceededProposalsCount(ctx context.Context, in *SucceededProposalsCountRequest, opts ...grpc.CallOption) (*SucceededProposalsCountResponse, error)
	GetDaosVotersParticipateIn(ctx context.Context, in *DaosVotersParticipateInRequest, opts ...grpc.CallOption) (*DaosVotersParticipateInResponse, error)
	GetTopVotersByVp(ctx context.Context, in *TopVotersByVpRequest, opts ...grpc.CallOption) (*TopVotersByVpResponse, error)
}

type analyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsClient(cc grpc.ClientConnInterface) AnalyticsClient {
	return &analyticsClient{cc}
}

func (c *analyticsClient) GetMonthlyActiveUsers(ctx context.Context, in *MonthlyActiveUsersRequest, opts ...grpc.CallOption) (*MonthlyActiveUsersResponse, error) {
	out := new(MonthlyActiveUsersResponse)
	err := c.cc.Invoke(ctx, Analytics_GetMonthlyActiveUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetVoterBuckets(ctx context.Context, in *VoterBucketsRequest, opts ...grpc.CallOption) (*VoterBucketsResponse, error) {
	out := new(VoterBucketsResponse)
	err := c.cc.Invoke(ctx, Analytics_GetVoterBuckets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetExclusiveVoters(ctx context.Context, in *ExclusiveVotersRequest, opts ...grpc.CallOption) (*ExclusiveVotersResponse, error) {
	out := new(ExclusiveVotersResponse)
	err := c.cc.Invoke(ctx, Analytics_GetExclusiveVoters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetMonthlyNewProposals(ctx context.Context, in *MonthlyNewProposalsRequest, opts ...grpc.CallOption) (*MonthlyNewProposalsResponse, error) {
	out := new(MonthlyNewProposalsResponse)
	err := c.cc.Invoke(ctx, Analytics_GetMonthlyNewProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetSucceededProposalsCount(ctx context.Context, in *SucceededProposalsCountRequest, opts ...grpc.CallOption) (*SucceededProposalsCountResponse, error) {
	out := new(SucceededProposalsCountResponse)
	err := c.cc.Invoke(ctx, Analytics_GetSucceededProposalsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetDaosVotersParticipateIn(ctx context.Context, in *DaosVotersParticipateInRequest, opts ...grpc.CallOption) (*DaosVotersParticipateInResponse, error) {
	out := new(DaosVotersParticipateInResponse)
	err := c.cc.Invoke(ctx, Analytics_GetDaosVotersParticipateIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetTopVotersByVp(ctx context.Context, in *TopVotersByVpRequest, opts ...grpc.CallOption) (*TopVotersByVpResponse, error) {
	out := new(TopVotersByVpResponse)
	err := c.cc.Invoke(ctx, Analytics_GetTopVotersByVp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServer is the server API for Analytics service.
// All implementations must embed UnimplementedAnalyticsServer
// for forward compatibility
type AnalyticsServer interface {
	GetMonthlyActiveUsers(context.Context, *MonthlyActiveUsersRequest) (*MonthlyActiveUsersResponse, error)
	GetVoterBuckets(context.Context, *VoterBucketsRequest) (*VoterBucketsResponse, error)
	GetExclusiveVoters(context.Context, *ExclusiveVotersRequest) (*ExclusiveVotersResponse, error)
	GetMonthlyNewProposals(context.Context, *MonthlyNewProposalsRequest) (*MonthlyNewProposalsResponse, error)
	GetSucceededProposalsCount(context.Context, *SucceededProposalsCountRequest) (*SucceededProposalsCountResponse, error)
	GetDaosVotersParticipateIn(context.Context, *DaosVotersParticipateInRequest) (*DaosVotersParticipateInResponse, error)
	GetTopVotersByVp(context.Context, *TopVotersByVpRequest) (*TopVotersByVpResponse, error)
	mustEmbedUnimplementedAnalyticsServer()
}

// UnimplementedAnalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServer struct {
}

func (UnimplementedAnalyticsServer) GetMonthlyActiveUsers(context.Context, *MonthlyActiveUsersRequest) (*MonthlyActiveUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyActiveUsers not implemented")
}
func (UnimplementedAnalyticsServer) GetVoterBuckets(context.Context, *VoterBucketsRequest) (*VoterBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoterBuckets not implemented")
}
func (UnimplementedAnalyticsServer) GetExclusiveVoters(context.Context, *ExclusiveVotersRequest) (*ExclusiveVotersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExclusiveVoters not implemented")
}
func (UnimplementedAnalyticsServer) GetMonthlyNewProposals(context.Context, *MonthlyNewProposalsRequest) (*MonthlyNewProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyNewProposals not implemented")
}
func (UnimplementedAnalyticsServer) GetSucceededProposalsCount(context.Context, *SucceededProposalsCountRequest) (*SucceededProposalsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSucceededProposalsCount not implemented")
}
func (UnimplementedAnalyticsServer) GetDaosVotersParticipateIn(context.Context, *DaosVotersParticipateInRequest) (*DaosVotersParticipateInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaosVotersParticipateIn not implemented")
}
func (UnimplementedAnalyticsServer) GetTopVotersByVp(context.Context, *TopVotersByVpRequest) (*TopVotersByVpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopVotersByVp not implemented")
}
func (UnimplementedAnalyticsServer) mustEmbedUnimplementedAnalyticsServer() {}

// UnsafeAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServer will
// result in compilation errors.
type UnsafeAnalyticsServer interface {
	mustEmbedUnimplementedAnalyticsServer()
}

func RegisterAnalyticsServer(s grpc.ServiceRegistrar, srv AnalyticsServer) {
	s.RegisterService(&Analytics_ServiceDesc, srv)
}

func _Analytics_GetMonthlyActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlyActiveUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetMonthlyActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetMonthlyActiveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetMonthlyActiveUsers(ctx, req.(*MonthlyActiveUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetVoterBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoterBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetVoterBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetVoterBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetVoterBuckets(ctx, req.(*VoterBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetExclusiveVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExclusiveVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetExclusiveVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetExclusiveVoters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetExclusiveVoters(ctx, req.(*ExclusiveVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetMonthlyNewProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlyNewProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetMonthlyNewProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetMonthlyNewProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetMonthlyNewProposals(ctx, req.(*MonthlyNewProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetSucceededProposalsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SucceededProposalsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetSucceededProposalsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetSucceededProposalsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetSucceededProposalsCount(ctx, req.(*SucceededProposalsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetDaosVotersParticipateIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaosVotersParticipateInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetDaosVotersParticipateIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetDaosVotersParticipateIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetDaosVotersParticipateIn(ctx, req.(*DaosVotersParticipateInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetTopVotersByVp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopVotersByVpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetTopVotersByVp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetTopVotersByVp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetTopVotersByVp(ctx, req.(*TopVotersByVpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Analytics_ServiceDesc is the grpc.ServiceDesc for Analytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalapi.Analytics",
	HandlerType: (*AnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonthlyActiveUsers",
			Handler:    _Analytics_GetMonthlyActiveUsers_Handler,
		},
		{
			MethodName: "GetVoterBuckets",
			Handler:    _Analytics_GetVoterBuckets_Handler,
		},
		{
			MethodName: "GetExclusiveVoters",
			Handler:    _Analytics_GetExclusiveVoters_Handler,
		},
		{
			MethodName: "GetMonthlyNewProposals",
			Handler:    _Analytics_GetMonthlyNewProposals_Handler,
		},
		{
			MethodName: "GetSucceededProposalsCount",
			Handler:    _Analytics_GetSucceededProposalsCount_Handler,
		},
		{
			MethodName: "GetDaosVotersParticipateIn",
			Handler:    _Analytics_GetDaosVotersParticipateIn_Handler,
		},
		{
			MethodName: "GetTopVotersByVp",
			Handler:    _Analytics_GetTopVotersByVp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/internalapi/analytics.proto",
}
